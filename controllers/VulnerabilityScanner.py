import urllib.request

import bcrypt
from flask import Flask, jsonify
from datetime import datetime
import pymysql
import sys
import os
from dotenv import load_dotenv
# sys.path.insert(0, os.path.abspath('..'))
from config import app
import json
import pdfkit

load_dotenv()


def mysqlconnect():
    # To connect MySQL database
    conn = pymysql.connect(
        host=os.getenv('DB_HOST'),
        user=os.getenv('DB_USER'),
        password=os.getenv('DB_PASS'),
        db=os.getenv('DB_NAME'),
    )
    conn.cursor().execute("set sql_mode=''")
    return conn


def saveUser(array):
    conn = mysqlconnect()
    cur = conn.cursor()
    cur.execute("SELECT * FROM users WHERE (imei_1=%s and imei_1 IS NOT NULL) or (imei_2=%s and imei_2 IS NOT NULL)",
                (array['imei_1'], array['imei_2']))
    fet = cur.fetchall()
    print(fet)
    if (len(fet) > 0):
        userId = fet[0][0]
    else:
        sql = "INSERT INTO `users` (`subscriber_id`,`operator_1`,`iccid_1`,`operator_2`,`iccid_2`, `imei_1`, `imei_2`) VALUES (%s,%s,%s,%s,%s, %s,%s)"
        cur.execute(sql, (array['subscriber'], array['operator_1'], array['iccid_1'],
                          array['operator_2'], array['iccid_2'], array['imei_1'], array['imei_2']))
        conn.commit()
        userId = cur.lastrowid
    return userId


def saveApp(userId, appInfo):
    conn = mysqlconnect()
    cur = conn.cursor()
    cur.execute(
        "SELECT * FROM applications WHERE user=%s AND package=%s AND version=%s AND installed=%s AND last_update=%s",
        (userId, appInfo['package'], appInfo['version'], appInfo['installed'], appInfo['updated']))
    fet = cur.fetchall()
    print(fet)
    try:
        if (len(fet) > 0):
            userId = fet[0][0]
        else:
            sql = "INSERT INTO `applications` (`user`,`name`,`version`,`package`,`sdk_version`,`installed`, `last_update`, `permissions`) VALUES (%s,%s,%s,%s,%s,%s, %s, %s)"
            print("app info")
            print(appInfo)
            permi = appInfo['permission'] if 'permission' in appInfo else ''
            cur.execute(sql, (userId, str(appInfo['name']), appInfo['version'], appInfo['package'],
                              appInfo['sdk_version'], appInfo['installed'], appInfo['updated'], permi))
            conn.commit()
    except Exception as e:
        f = open('logs/error_log.txt', 'a')
        f.write(str(datetime.now()) + ' APPREG ' + str(e) + '\n')
        f.close()
    return cur.lastrowid


def getCriticalApps():
    arr = {}
    count = 0
    conn = mysqlconnect()
    cur = conn.cursor()
    cur.execute(
        "SELECT * FROM applications app  WHERE app.permissions like '%USE_FINGERPRINT%' OR app.permissions like '%USE_BIOMETRIC%'  OR app.permissions  LIKE '%ACCESS_FINE_LOCATION%' OR app.permissions  LIKE '%SEND_SMS%' OR app.permissions  LIKE '%UNINSTALL_SHORTCUT%' or app.permissions LIKE '%DOWNLOAD_WITHOUT_NOTIFICATION%' GROUP BY app.package")
    app_data = cur.fetchall()

    if (len(app_data) > 0):
        users = []
        for obj in app_data:
            cur.execute(
                "SELECT u.*,u.id as user_id,u.created_at as user_created_at FROM users u WHERE u.id = %s" % (obj[1]))
            user_data = cur.fetchall()
            print("User len " + str(len(user_data)))

            for user in user_data:
                print("Inside pydictionary") if str(obj[1]) in user else print("Not in kbsa")
                if (obj[1] not in users):
                    users.append(obj[1])
                    arr[user[3]] = {'profile': {}, 'apps': []}
                    print(arr)
                    arr[user[3]]['profile'] = {'user_id': user[0], 'subscriber_id': user[1], 'operator_1': user[2],
                                               'iccid_1': user[3], 'operator_2': user[4], 'iccid_2': user[5],
                                               'imei_1': user[6], 'imei_2': user[7], 'user_created_at': str(
                            user[8])}
                    if ('apps' not in arr[user[3]]):
                        arr[user[3]]['apps'].append(
                            {'app_id': obj[0], 'app_name': obj[2], 'version': obj[3], 'package': obj[4],
                             'sdk_version': obj[5], 'installed': str(obj[6]), 'updated': str(obj[7]),
                             'permissions': obj[8], 'recorded_at': str(obj[10])})
                        print(arr)
                    else:
                        arr[user[3]]['apps'].append(
                            {'app_id': obj[0], 'app_name': obj[2], 'version': obj[3], 'package': obj[4],
                             'sdk_version': obj[5], 'installed': str(
                                obj[6]), 'updated': str(obj[7]), 'permissions': obj[8], 'recorded_at': str(obj[10])})
                else:  # for existing user
                    if ('apps' not in arr[user[3]]):
                        arr[user[3]] = {'apps': []}
                        arr[user[3]].append({'app_id': obj[0], 'app_name': obj[2], 'version': obj[3], 'package': obj[4],
                                             'sdk_version': obj[5], 'installed': str(
                                obj[6]), 'updated': str(obj[7]), 'permissions': obj[8], 'recorded_at': str(obj[10])})
                    else:
                        arr[user[3]]['apps'].append(
                            {'app_id': obj[0], 'app_name': obj[2], 'version': obj[3], 'package': obj[4],
                             'sdk_version': obj[5], 'installed': str(
                                obj[6]), 'updated': str(obj[7]), 'permissions': obj[8], 'recorded_at': str(obj[10])})
                # arr.append({'user_id':obj[0],'subscriber_id':obj[1]})
                count += 1

    # print(arr)
    return arr
    # return json.loads(json.dumps(arr,indent=4, sort_keys=True, default=str))


def getIntermediateCriticalApps():
    arr = {}
    count = 0
    conn = mysqlconnect()
    cur = conn.cursor()
    cur.execute(
        "SELECT * FROM applications app  WHERE app.permissions not like '%INTERNET%' and (app.permissions like '%WRITE_EXTERNAL_STORAGE%' OR app.permissions like '%READ_EXTERNAL_STORAGE%'  OR app.permissions  LIKE '%CAMERA%' OR app.permissions  LIKE '%RECORD_AUDIO%' OR app.permissions  LIKE '%READ_PHONE_NUMBERS%' OR app.permissions LIKE '%READ_CONTACTS%' OR app.permissions LIKE '%WRITE_CONTACTS%') GROUP BY app.package")
    app_data = cur.fetchall()

    if (len(app_data) > 0):
        users = []
        for obj in app_data:
            cur.execute(
                "SELECT u.*,u.id as user_id,u.created_at as user_created_at FROM users u WHERE u.id = %s" % (obj[1]))
            user_data = cur.fetchall()

            for user in user_data:
                if (obj[1] not in users):
                    users.append(obj[1])
                    arr[user[3]] = {'profile': {}, 'apps': []}
                    print(arr)
                    arr[user[3]]['profile'] = {'user_id': user[0], 'subscriber_id': user[1], 'operator_1': user[2],
                                               'iccid_1': user[3], 'operator_2': user[4], 'iccid_2': user[5],
                                               'imei_1': user[6], 'imei_2': user[7], 'user_created_at': str(
                            user[8])}
                    if ('apps' not in arr[user[3]]):
                        arr[user[3]]['apps'].append(
                            {'app_id': obj[0], 'app_name': obj[2], 'version': obj[3], 'package': obj[4],
                             'sdk_version': obj[5], 'installed': str(
                                obj[6]), 'updated': str(obj[7]), 'permissions': obj[8], 'recorded_at': str(obj[10])})
                        print(arr)
                    else:
                        arr[user[3]]['apps'].append(
                            {'app_id': obj[0], 'app_name': obj[2], 'version': obj[3], 'package': obj[4],
                             'sdk_version': obj[5], 'installed': str(
                                obj[6]), 'updated': str(obj[7]), 'permissions': obj[8], 'recorded_at': str(obj[10])})
                else:  # for existing user
                    if ('apps' not in arr[user[3]]):
                        arr[user[3]] = {'apps': []}
                        arr[user[3]].append({'app_id': obj[0], 'app_name': obj[2], 'version': obj[3], 'package': obj[4],
                                             'sdk_version': obj[5], 'installed': str(
                                obj[6]), 'updated': str(obj[7]), 'permissions': obj[8], 'recorded_at': str(obj[10])})
                    else:
                        arr[user[3]]['apps'].append(
                            {'app_id': obj[0], 'app_name': obj[2], 'version': obj[3], 'package': obj[4],
                             'sdk_version': obj[5], 'installed': str(
                                obj[6]), 'updated': str(obj[7]), 'permissions': obj[8], 'recorded_at': str(obj[10])})
                # arr.append({'user_id':obj[0],'subscriber_id':obj[1]})
                count += 1
        return arr


def getNonCriticalApps():
    arr = {}
    count = 0
    conn = mysqlconnect()
    cur = conn.cursor()
    cur.execute(
        "SELECT * FROM applications app WHERE (app.permissions like '%INTERNET%' and (app.permissions NOT like '%WRITE_EXTERNAL_STORAGE%'AND app.permissions NOT like '%READ_EXTERNAL_STORAGE%'  AND app.permissions  NOT LIKE '%CAMERA%' AND app.permissions  NOT LIKE '%RECORD_AUDIO%' AND app.permissions  NOT LIKE '%READ_PHONE_NUMBERS%' AND app.permissions NOT LIKE '%READ_CONTACTS%' AND app.permissions NOT LIKE '%WRITE_CONTACTS%')) OR (app.permissions NOT LIKE '%INTERNET%' AND app.permissions NOT LIKE '%BLUETOOTH%' AND app.permissions NOT LIKE '%NFC%' AND app.permissions NOT LIKE '%RECORD_AUDIO%' AND app.permissions NOT LIKE '%CAMERA%') GROUP BY app.package")
    app_data = cur.fetchall()

    if (len(app_data) > 0):
        users = []
        for obj in app_data:
            cur.execute(
                "SELECT u.*,u.id as user_id,u.created_at as user_created_at FROM users u WHERE u.id = %s" % (obj[1]))
            user_data = cur.fetchall()

            for user in user_data:
                if (obj[1] not in users):
                    users.append(obj[1])
                    arr[user[3]] = {'profile': {}, 'apps': []}
                    print(arr)
                    arr[user[3]]['profile'] = {'user_id': user[0], 'subscriber_id': user[1], 'operator_1': user[2],
                                               'iccid_1': user[3], 'operator_2': user[4], 'iccid_2': user[5],
                                               'imei_1': user[6], 'imei_2': user[7], 'user_created_at': str(
                            user[8])}
                    if ('apps' not in arr[user[3]]):
                        arr[user[3]]['apps'].append(
                            {'app_id': obj[0], 'app_name': obj[2], 'version': obj[3], 'package': obj[4],
                             'sdk_version': obj[5], 'installed': str(
                                obj[6]), 'updated': str(obj[7]), 'permissions': obj[8], 'recorded_at': str(obj[10])})
                        print(arr)
                    else:
                        arr[user[3]]['apps'].append(
                            {'app_id': obj[0], 'app_name': obj[2], 'version': obj[3], 'package': obj[4],
                             'sdk_version': obj[5], 'installed': str(
                                obj[6]), 'updated': str(obj[7]), 'permissions': obj[8], 'recorded_at': str(obj[10])})
                else:  # for existing user
                    if ('apps' not in arr[user[3]]):
                        arr[user[3]] = {'apps': []}
                        arr[user[3]].append({'app_id': obj[0], 'app_name': obj[2], 'version': obj[3], 'package': obj[4],
                                             'sdk_version': obj[5], 'installed': str(
                                obj[6]), 'updated': str(obj[7]), 'permissions': obj[8], 'recorded_at': str(obj[10])})
                    else:
                        arr[user[3]]['apps'].append(
                            {'app_id': obj[0], 'app_name': obj[2], 'version': obj[3], 'package': obj[4],
                             'sdk_version': obj[5], 'installed': str(
                                obj[6]), 'updated': str(obj[7]), 'permissions': obj[8], 'recorded_at': str(obj[10])})
                # arr.append({'user_id':obj[0],'subscriber_id':obj[1]})
                count += 1
        return arr
    # return json.loads(json.dumps(arr,indent=4, sort_keys=True, default=str))


def arrangedAppsPerOwner(criticals, intermediates, noncriticals):
    apps = {}
    owners = {}
    if (criticals != None):
        for critical in criticals:
            if critical not in owners:
                owners[critical] = {'profile': {}, 'apps': []}
                owners[critical]['profile'] = criticals[critical]['profile']
            owners[critical]['apps'].append(criticals[critical]['apps'] if 'apps' in criticals[critical] else {})

    if (intermediates != None):
        for intermediate in intermediates:
            if intermediate not in owners:
                owners[intermediate] = {'profile': {}, 'apps': []}
                owners[intermediate]['profile'] = intermediates[intermediate]['profile']
            owners[intermediate]['apps'].append(
                intermediates[intermediate]['apps'] if 'apps' in intermediates[intermediate] else {})

    if (noncriticals != None):
        for noncritical in noncriticals:
            if noncritical not in owners:
                owners[noncritical] = {'profile': {}, 'apps': []}
                owners[noncritical]['profile'] = noncriticals[noncritical]['profile']
            owners[noncritical]['apps'].append(
                noncriticals[noncritical]['apps'] if 'apps' in noncriticals[noncritical] else {})

    # merge apss from different category [critical,intermediate and non critical]
    app_counter = 0
    for owner in owners:
        if 'apps' in owners[owner]:
            all_apps = []
            for appkey in range(len(owners[owner]['apps'])):
                if 'applications' not in owners[owner]:
                    owners[owner]['applications'] = []
                    print("Len user " + str(owner))
                owners[owner]['applications'].extend(owners[owner]['apps'][appkey])
            owners[owner]['apps'] = owners[owner]['applications']
            del owners[owner]['applications']
            listApps = [{'critical': searchFromList(getCriticalApps(), owner)}]
            owners[owner]['apps_categories'] = {'critical': searchFromList(getCriticalApps(), owner),
                                                'intermediate': searchFromList(getIntermediateCriticalApps(), owner),
                                                'noncritical': searchFromList(getNonCriticalApps(), owner)}

            # owners[owner]['apps']['intermediate'] = searchFromList(getIntermediateCriticalApps(),owner)
            # owners[owner]['apps']['noncritical'] = searchFromList(getNonCriticalApps(),owner)
    return owners


def searchFromList(ls, sr):
    if ls == None:
        return []
    if sr in ls:
        if 'apps' in ls[sr]:
            return ls[sr]['apps']
        return []
    # if sr in ls:
    # return ls[sr]['apps'] if ls[sr] !=None and 'apps' in ls[sr] else []


def getUsers():
    arr = []
    count = 0
    conn = mysqlconnect()
    cur = conn.cursor()
    cur.execute("SELECT u.* FROM users u")
    data = cur.fetchall()

    for obj in data:
        print(obj[3])
        arr.append(
            {'user_id': obj[0], 'subscriber_id': obj[1], 'operator_1': obj[2], 'iccid_1': obj[3], 'operator_2': obj[4],
             'iccid_2': obj[5], 'imei_1': obj[6],
             'imei_2': obj[7], 'user_created_at': str(obj[8]), 'critical_apps': getCriticalApps(obj[0]),
             'non_critical_apps': getNonCriticalApps(obj[0])})
        count += 1

    return arr


def dashboard():
    criticalApps = getCriticalApps()
    intermediateApps = getIntermediateCriticalApps()
    nonCriticalApps = getNonCriticalApps()
    byOwnerApps = arrangedAppsPerOwner(criticalApps, intermediateApps, nonCriticalApps)
    data = {
        'categorized': {'critical': criticalApps, 'intermediate': intermediateApps, 'non_critical': nonCriticalApps},
        'all': byOwnerApps}
    return json.loads(json.dumps(data))


class Apps:
    conn = None

    def __init__(self):
        self.conn = mysqlconnect()
        self.adminExistence()
        if sys.platform == 'linux':
            self.conn.cursor().execute('set sql_mode=""')

    def adminExistence(self):
        userId = 0
        cur = self.conn.cursor()
        pwd = bcrypt.hashpw("12345".encode("utf-8"),bcrypt.gensalt())
        cur.execute("SELECT * FROM admin")
        fet = cur.fetchall()
        row_count = cur.rowcount
        if row_count == 0:
            sql = "INSERT INTO `admin` (`username`,`password`) VALUES (%s,%s)"
            cur.execute(sql, ("yannick.tunga", pwd))
            self.conn.commit()
            userId = cur.lastrowid
        return userId

    def login(self, username, password):
        resp = {"status": False, "user": {}}
        print(f"Username {username} password {password}")
        cur = self.conn.cursor()
        cur.execute(
            "SELECT * FROM admin where username=%s", username)
        row_count = cur.rowcount
        if row_count != 0:
            fet = cur.fetchall()
            for obj in fet:
                if bcrypt.checkpw(str(password).encode("UTF-8"), str(obj[2]).encode("UTF-8")):
                    return {"status": True, "user": {"id": obj[0], "username": obj[1]}}

        return resp

    def critical(self, start_date=None, end_date=None):
        cur = self.conn.cursor()
        if start_date is not None and end_date is not None:
            cur.execute(
                f"SELECT *,count(*) as number_of_installation FROM applications app  WHERE (app.permissions like '%USE_FINGERPRINT%' OR app.permissions like '%USE_BIOMETRIC%' OR app.permissions  LIKE '%RECEIVE_BOOT_COMPLETED%' OR app.permissions LIKE '%DOWNLOAD_WITHOUT_NOTIFICATION%') AND installed BETWEEN '{start_date}' AND '{end_date}'  GROUP BY app.package")
        else:
            # cur.execute("SELECT *,count(*) as number_of_installation FROM applications app  WHERE (app.permissions like '%USE_FINGERPRINT%' OR app.permissions like '%USE_BIOMETRIC%' OR app.permissions  LIKE '%RECEIVE_BOOT_COMPLETED%' OR app.permissions LIKE '%DOWNLOAD_WITHOUT_NOTIFICATION%') group by app.package")
            cur.execute("SELECT *,count(*) as number_of_installation FROM applications app  WHERE (app.permissions like '%USE_FINGERPRINT%' AND app.permissions  LIKE '%RECEIVE_BOOT_COMPLETED%' AND app.permissions LIKE '%DOWNLOAD_WITHOUT_NOTIFICATION%') group by app.package")

        app_data = cur.fetchall()
        return app_data

    def high(self, start_date=None, end_date=None):
        cur = self.conn.cursor()
        if start_date is not None and end_date is not None:
            cur.execute(
                f"select *,count(*) as number_of_installation from applications apps where (apps.permissions LIKE '%CHANGE_NETWORK_STATE%'"
                "OR apps.permissions LIKE '%ACCESS_FINE_LOCATION%' OR apps.permissions LIKE '%RECORD_AUDIO%'"
                "OR apps.permissions  LIKE '%CAMERA%') AND apps.package not in (SELECT app.package FROM applications app "
                " WHERE (app.permissions like '%USE_FINGERPRINT%'"
                "OR app.permissions like '%USE_BIOMETRIC%' OR app.permissions  LIKE '%RECEIVE_BOOT_COMPLETED%'"
                "OR app.permissions LIKE '%DOWNLOAD_WITHOUT_NOTIFICATION%'"
                ") group by app.package) AND apps.installed BETWEEN {start_date} AND {end_date} GROUP BY app.package")
        else:
            cur.execute(
                "select *,count(*) as number_of_installation from applications apps where (apps.permissions LIKE '%CHANGE_NETWORK_STATE%'"
                "OR apps.permissions LIKE '%ACCESS_FINE_LOCATION%' OR apps.permissions LIKE '%RECORD_AUDIO%'"
                "OR apps.permissions  LIKE '%CAMERA%') AND apps.package not in (SELECT app.package FROM applications app "
                " WHERE (app.permissions like '%USE_FINGERPRINT%'"
                "OR app.permissions like '%USE_BIOMETRIC%' OR app.permissions  LIKE '%RECEIVE_BOOT_COMPLETED%'"
                "OR app.permissions LIKE '%DOWNLOAD_WITHOUT_NOTIFICATION%'"
                ") group by app.package) GROUP BY apps.package")

        app_data = cur.fetchall()
        return app_data

    def medium(self, start_date=None, end_date=None):
        cur = self.conn.cursor()
        if start_date is not None and end_date is not None:
            cur.execute(
                f"select *,count(*) as number_of_installation from applications medium_apps where medium_apps.package not in "
                "(select apps.package from applications apps WHERE apps.permissions LIKE '%CHANGE_NETWORK_STATE%'"
                "OR apps.permissions LIKE '%ACCESS_FINE_LOCATION%' OR apps.permissions LIKE '%RECORD_AUDIO%'"
                "OR apps.permissions  LIKE '%CAMERA%' OR apps.permissions like '%USE_FINGERPRINT%'"
                "OR apps.permissions like '%USE_BIOMETRIC%' OR apps.permissions  LIKE '%RECEIVE_BOOT_COMPLETED%'"
                "OR apps.permissions LIKE '%DOWNLOAD_WITHOUT_NOTIFICATION%'"
                ") AND medium_apps.installed BETWEEN {str(start_date)} AND {str(end_date)} GROUP BY medium_apps.package")
        else:
            cur.execute(
                "select *,count(*) as number_of_installation from applications medium_apps where medium_apps.package not in "
                "(select apps.package from applications apps WHERE apps.permissions LIKE '%CHANGE_NETWORK_STATE%'"
                "OR apps.permissions LIKE '%ACCESS_FINE_LOCATION%' OR apps.permissions LIKE '%RECORD_AUDIO%'"
                "OR apps.permissions  LIKE '%CAMERA%' OR apps.permissions like '%USE_FINGERPRINT%'"
                "OR apps.permissions like '%USE_BIOMETRIC%' OR apps.permissions  LIKE '%RECEIVE_BOOT_COMPLETED%'"
                "OR apps.permissions LIKE '%DOWNLOAD_WITHOUT_NOTIFICATION%'"
                ") GROUP BY medium_apps.package")

        app_data = cur.fetchall()
        return app_data

    def dashboard(self):
        critical_apps = len(self.critical())
        high_apps = len(self.high())
        medium_apps = len(self.medium())
        all_apps = critical_apps + high_apps + medium_apps
        data = {'critical': critical_apps, 'high': high_apps,
                'medium': medium_apps, 'all': all_apps}
        return data

    def filter_report(self, levels, start_date, end_date):
        critical_apps = None
        high_apps = None
        medium_apps = None
        print(f"levels {levels}")

        if levels == 'critical':
            print("critical")
            critical_apps = self.critical(start_date, end_date)
            all_apps = self.apps_list_to_obj(critical_apps)
        elif levels == 'high':
            print("high")
            intermediate_apps = self.high(start_date, end_date)
            all_apps = self.apps_list_to_obj(intermediate_apps)
        elif levels == 'medium':
            print("medium")
            noncritical_apps = self.medium(start_date, end_date)
            all_apps = self.apps_list_to_obj(noncritical_apps)
        else:
            print("all")
            critical_apps = self.critical(start_date, end_date)
            high_apps = self.high(start_date, end_date)
            medium_apps = self.medium(start_date, end_date)
            all_apps = {"critical": self.apps_list_to_obj(critical_apps), "high": self.apps_list_to_obj(high_apps),
                        "medium": self.apps_list_to_obj(medium_apps)}
        data = {'all': all_apps}
        return data

    def apps_list_to_obj(self, apps):
        formatted_apps = []
        print(apps)
        for obj in apps:
            formatted_apps.append(
                {'app_id': obj[0], 'app_name': obj[2], 'version': obj[3], 'package': obj[4],
                 'sdk_version': obj[5], 'installed': str(
                    obj[6]), 'updated': str(obj[7]), 'permissions': obj[8], 'recorded_at': str(obj[10])})
        return formatted_apps

